package tetris;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.Text;

/**
 * UI element generated by parsing `scores.txt`
 * @author John Meyering
 *
 */
public class Leaderboard extends Pane {
	
	List<Entry> entries;
	
	public Leaderboard() {
		drawBackground();
		readEntries();
		displayEntries();
	}
	
	/**
	 * Sets the height, width, and color of the leaderboard
	 * Also does the header and button (non-parsed elements basically)
	 */
	public void drawBackground() {
		setPrefSize(550, 450);
		setLayoutX(25);
		setLayoutY(108);
		setStyle("-fx-background-color: #00c0b5ff");
		
		// The Header
		Text header = new Text("LEADERBOARD");
		header.setFont(new Font("sans-serif", 40));
		header.setFill(Color.WHITE);
		header.setLayoutX(140);
		header.setLayoutY(50);
		getChildren().add(header);
		
		// The Return button
		CustomButton returnButton = new CustomButton("Return");
		returnButton.setBG(195, 380, 160, 50);
		returnButton.setLabel(215, 390);
		getChildren().add(returnButton);
		returnButton.setOnMouseClicked( (MouseEvent event) -> {
			Tetris.toggleLeaderboard();
		});
	}
	
	/**
	 * Reads entries from `scores.txt` into `entries`
	 */
	public void readEntries() {
		entries = new ArrayList<>();
		try {
			File file = new File("scores.txt");
			Scanner scanner = new Scanner(file);
			while(scanner.hasNextLine()) {
				String line = scanner.nextLine();
				Entry newEntry = new Entry(line);
				entries.add(newEntry);
			}
			scanner.close();
		} catch(Exception e) {
			System.out.println(e.getMessage() + " in Leaderboard.readEntries()");
		}
	}
	
	/**
	 * Generates an entry for the top 6 scores in `entries`
	 */
	public void displayEntries() {
		Collections.sort(entries);
		for(int i=0; i < 6; ++i) {
			if(i < entries.size()) {
				// just in case the scores file was tampered with
				
				Entry curr = entries.get(i);
				// The date
				Text date = new Text(curr.date);
				date.setFont(Tetris.font);
				date.setFill(Color.WHITE);
				date.setLayoutX(30);
				date.setLayoutY(112 + (i * 50));
				getChildren().add(date);
				
				// The score
				Text score = new Text(curr.score.toString());
				score.setFont(Tetris.font);
				score.setFill(Color.WHITE);
				score.setLayoutX(400);
				score.setLayoutY(112 + (i * 50));
				getChildren().add(score);
			}
		}
	}
	
	
	public class Entry implements Comparable<Entry> {
		String date;
		Integer score;
		
		public Entry(String data) {
			String[] strings = data.split(" ");
			date = strings[0];
			score = Integer.parseInt(strings[1]);
		}
		
		@Override
		public int compareTo(Entry entry) {
			return (int) (entry.score - this.score);
		}
	}
}
